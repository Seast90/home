PAM使用说明


【数组约定】

1.s[]表示当前已经插入到自动机的串，s[0]=-1，真实的字符从s[1]开始，s[]的活动范围是[0,n]

在多串模式中，中间的间隔符，是从-2开始递减的负数，会完全隔绝串间的回文匹配

2.len[i]表示i这个节点表示的回文子串的长度

3.next[i][c]   i这个节点，在字符c方向的转移

4.fail[]   失配指针

5.cnt[i]  表示节点i以最长回文后缀出现的前缀下标的个数，通过count()调用，求出每个节点表示的回文串出现的次数

6.dep[i]  i这个节点在parent树中的深度，其实际意义是：以i为终止下标的回文后缀的个数

7.id[i]   表示i这个下标（指的是插入串s[]）,所代表的前缀的最长回文后缀在自动机中的节点编号

8.no[i]   i这个节点，在插入串s[]出现的最末下标(此处指的是右端点)，用于获取具体的回文串内容

9.last  当前插入的字符生效后，指向最长回文后缀节点，在当前必然是parent树上的叶子节点

10.n   插入的串，字符数0...n

   p   任何时刻都表示自动机中的自动机中的最大节点标号+1，节点标号：0..p-1

   p-2    为任意时刻本质不同的回文串的个数

   str_cnt   多串模式下表示插入的串的个数，串编号从0开始

   d0   当前间隔符       M    字符集大小，0..25，默认小写字母




【函数说明】

1.int new_node(int _l)  新建节点，回文长度为_l

2.void Init()   每组数据初始化自动机，O（1）

3.int get_fail(int x)   沿着失配指针，获取最长匹配节点

4.void I(int c)    插入字符c，注意是默认小写字母

5.void Insert(char s[],int _n=0)    用户接口，插入串，多串意义下无须考虑间隔符

6.void count()   树dp，可以计算很多内容，默认计算回文串出现的次数

7.ll Q()   用户接口，主操作，或者称主询问

8.单链表中：查询next[x][y] 等价于 next[x].F(y)
            修改next[x][y]=z 等价于 next[x].I(y,z)


【使用方法】

1.每组数据都要首先Init()

2.多串模式下，直接Insert(s，长度)

3.求全局回文子串的个数，cnt[]求和即可；也可以不进行count(),直接每个节点cnt[]*dep[]求和

求任意前缀回文子串的个数，相当于动态即时查询，需要动态维护答案；

考虑每个节点每次的贡献，其实就是深度，所以在cnt[x]++的时候，将深度dep[x]加入答案，即可回答

也可以这样考虑，叠加每个新插入字符新增的回文后缀的数目，这个结构上等价于dep[x]


【注意点】

1.老生常谈，注意多串插入时，N的大小调整，要比总串长大一点

2.count() 调用时，务必要注意：树dp的数组，是否需要开long long；一般，回文串总数目需要long long