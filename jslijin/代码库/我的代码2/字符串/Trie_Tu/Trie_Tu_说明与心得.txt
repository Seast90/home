【说明】

【心得】

1.trie图或者AC自动机要比后缀自动机容易，这也反映着在一些方面可能存在着本质的局限性

很显然，trie图能且只善于识别模式串集合或者说trie树上的前缀，不善于识别一切子串

可以识别多模式子串或者trie树的后缀及其子串的，可选广义后缀自动机

trie图善于模式串对主串求分布，不善于主串对模式串求分布

2.在trie图上运行一个主串s[0..n-1]，如果当前运行到i下标，也就是考虑了s[0..i]，锁定了pos这个结点状态

那么s[i-dep[pos]+1...i]就是主串的前缀s[0..i]所对应的最大可识别后缀，dep[pos]是其长度，也是pos在trie树上的深度

这里，可识别是说，改子串是某个模式串的前缀，也就是trie树的前缀

3.与后缀自动机不同，在线构造结构多变，不易维护dep[]，但是trie树的在线插入本来就是以父节点为依托的，容易维护dep[]

我们在trie图的基础版本中，用了记忆化的方式叠加贡献（SAM求dep），目的是加速查询速度；但是如果引入了启发式合并，就不容易简洁的书写

所以我们可以利用dep[]对结点做拓扑排序，这与后缀自动机相同，然后用一致的结构来完成树形dp或者合并，这体现了自动机之间的一致性与兼容性

4.在trie图的parent树上做树形dp或者树上合并，根据方向有以下总结：

自上而下的dp：求当前结点确定的trie树前缀字符串的后缀中有多少个模式串，或者说模式串在当前前缀的所有后缀中的分布

自下而上的dp：求当前结点确定的trie树前缀字符串是多少个模式串的后缀，或者说当前前缀在模式串后缀集合中的分布

5.关于安全图：这类问题是说求长度受限且不包含病毒串（或者受限）的字符集上的串数目，受限条件转化为trie图上的一些结点不可以走，称之为

危险结点，除此之外为安全结点；用安全结点导出的子图（有向图，无pre指针）忽略边权，就是安全图，trie图模版可以给出一个指向安全图的邻接矩阵

的指针，这里邻接矩阵无多重边，但是可能有自环且可能不止一条。也就是说，把一个串计数问题，转化为图上的路径计数问题，利用邻接矩阵可以做快速幂的

特性完成计数。

6.关于模式串对主串求分布，除了树上合并，还可以：如果是单主串的话，运行主串，在主串走到的每个结点打上标记，然后做自下而上的树形dp，询问

第k个模式串出现的次数，可以输出这个模式串的串尾所对应自动机上结点的dp值(sum)，原理上此结点fail子树的和，即是出现次数，主串走到的每个位置，就是

该主串前缀与trie的最长公共前后缀，也就是说主串前缀的最长后缀在trie是前缀的出现次数，对每个前缀记录信息，然后自下而上求和，是自动机求子串出现

次数的通法。用户依次操作：init(),insert(模式串),build(),对每个主串，先Run(主串)，再询问Q(k）。(Run中有memset清空)

7.但是如果是多主串，依次询问，此版本也可以，但是由于大量树形dp，导致复杂度O(主串串总长+主串个数*trie上结点个数)，十分慢，

就算用时间戳优化，也不行；所以我们对每个主串的前缀打标记如上（按dfs序单点修改树状数组），dp求和时，牺牲一个log时间复杂度，对fail子树的dfs序区间求和，需要注意的是，

树状数组不能每次都清空，于是我们再次运行当前主串，消除此串的在树状数组中的标记；询问时求和，树状数组区间求和，时间复杂度

O(（主串总长+总询问次数）*log(trie树上结点总数cnt))。

8.如果要维护树上根到每个结点路径上字符主串（离线处理），显然递归时标记，回溯时撤销，走到某个节点，回答与此结点相关的询问。

