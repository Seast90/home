#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
using namespace std;

/*
	Template
*/
 
#define INLINE __attribute__((optimize("O3"))) inline
INLINE char NC(void)
{
        static char buf[100000], *p1 = buf, *p2 = buf;
        if (p1 == p2) {
                p2 = (p1 = buf) + fread(buf, 1, 100000, stdin);
                if (p1 == p2) return EOF;
        }
        return *p1++;
}
INLINE void read(int &x) {
        static char c; c = NC(); int b = 1;
        for (x = 0; !(c >= '0' && c <= '9'); c = NC()) if(c == '-') b = -b;
        for (; c >= '0' && c <= '9'; x = x * 10 + c - '0', c = NC()); x *= b;
}
using namespace Scapegoat_Tree;
 
STree _t;
int n, k, m;
int main(void) {
        //freopen("in.txt", "r", stdin);
        //freopen("out.txt", "w", stdout);
        read(n);
        while (n--) {
                read(k), read(m);
                switch (k) {
                case 1: _t.Insert(m); break;
                case 2: _t.Erase(m); break;
                case 3: printf("%d\n", _t.Rank(m)); break;
                case 4: printf("%d\n", _t.Kth(m)); break;
                case 5: printf("%d\n", _t.Kth(_t.Rank(m) - 1)); break;
                case 6: printf("%d\n", _t.Kth(_t.Rank(m + 1))); break;
                }
                /* DEBUG INFO
                vector<Node *> xx;
                _t.Travel(_t.root, xx);
                cout << "::";
                for(int i = 0; i < xx.size(); i++) cout << xx[i]->key << ' '; cout << endl;
                */
        }
        return 0;

}
